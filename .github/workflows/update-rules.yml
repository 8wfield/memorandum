name: Update Loon and Egern Rules

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *"

permissions:
  actions: write
  contents: write

concurrency:
  group: update-rules
  cancel-in-progress: true

jobs:
  UpdateRules:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.2.2

      - name: Download Loon Rules
        run: |
          # 清理旧临时文件并创建目录
          rm -rf Loon/Rule Temp
          mkdir -p Loon/Rule Temp

          # 定义规则列表（确保键值名称与文件名完全一致）
          declare -A rules=(
            ["Telegram"]="https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Telegram/Telegram.list"
            ["YouTube"]="https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/YouTube/YouTube.list"
            ["Twitter"]="https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Twitter/Twitter.list"
            ["Spotify"]="https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Spotify/Spotify.list"
            ["AI"]="https://kelee.one/Tool/Loon/Rule/AI.list"
            ["TikTok"]="https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/TikTok/TikTok.list"
            ["Instagram"]="https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Instagram/Instagram.list"
            ["GitHub"]="https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/GitHub/GitHub.list"
            ["Google"]="https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Google/Google.list"
          )

          # 下载规则并严格校验
          for name in "${!rules[@]}"; do
            url="${rules[$name]}"
            output="Temp/${name}.list"
            url_file="Temp/${name}.url"
            
            echo "▌下载规则: $name"
            if curl -sL --fail -H "User-Agent: Surge iOS/3450" "$url" -o "$output"; then
              # 校验文件有效性（至少包含一个非注释行）
              if grep -qE '^(DOMAIN|DOMAIN-SUFFIX|IP-CIDR|URL-REGEX)' "$output"; then
                echo "$url" > "$url_file"
                echo "✓ 成功下载: $name"
              else
                echo "✗ 文件无效: $name (无有效规则)"
                rm -f "$output"
              fi
            else
              echo "✗ 下载失败: $name"
              rm -f "$output"
            fi
          done

      - name: Process Loon Rules
        run: |
          shopt -s nullglob  # 避免无匹配文件时报错
          for file in Temp/*.list; do
            name=$(basename "$file" .list)
            url_file="Temp/${name}.url"
            
            # 严格检查关联文件存在性
            if [[ ! -f "$url_file" ]]; then
              echo "▌跳过处理: $name (缺少URL文件)"
              continue
            fi

            echo "▌处理规则: $name"
            line_count=$(grep -vcE '^(#|$)' "$file")
            [[ "$line_count" -eq 0 ]] && {
              echo "✗ 跳过空规则: $name"
              continue
            }

            # 生成最终规则文件
            {
              echo "# 引用链接: $(cat "$url_file")"
              echo "# 规则名称: $name"
              echo "# 规则统计: $line_count"
              grep -vE '^(#|PROCESS-NAME)' "$file"
            } > "Loon/Rule/${name}.list"
          done

      - name: Convert to Egern Format
        run: |
          mkdir -p Egern/Rule
          shopt -s nullglob
          for file in Loon/Rule/*.list; do
            name=$(basename "$file" .list)
            output="Egern/Rule/${name}.yaml"
            
            echo "▌转换格式: $name"
            {
              echo "# 规则来源: Loon/Rule/${name}.list"
              awk '
                BEGIN {
                  print "domain_set:"
                  print "domain_suffix_set:"
                  print "domain_keyword_set:"
                  print "domain_wildcard_set:"
                  print "ip_cidr_set:"
                  print "ip_cidr6_set:"
                  print "asn_set:"
                  print "url_regex_set:"
                  print "dest_port_set:"
                  print "geoip_set:"
                }
                /^DOMAIN,/ { print "  - " $2 }
                /^DOMAIN-SUFFIX,/ { print "  - " $2 }
                /^DOMAIN-KEYWORD,/ { print "  - " $2 }
                /^DOMAIN-WILDCARD,/ { print "  - " $2 }
                /^IP-CIDR,/ { print "  - " $2 }
                /^IP-CIDR6,/ { print "  - " $2 }
                /^URL-REGEX,/ { print "  - \"" $2 "\"" }
              ' "$file" | grep -vE '^[[:space:]]*$'
            } > "$output"
          done

      - name: Commit Changes
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add Loon/Rule/*.list Egern/Rule/*.yaml 2>/dev/null || true

          if git status -s | grep -q .; then
            git commit -m "Update Rules $(date +'%Y-%m-%d %H:%M:%S')"
            git pull --rebase origin main
            git push origin main
          else
            echo "▌无变更需要提交"
          fi

      - name: Clean Workflow Runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          retain_days: 0
          keep_minimum_runs: 12