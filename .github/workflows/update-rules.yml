name: Update Loon and Egern Rules

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *"

permissions:
  actions: write
  contents: write

jobs:
  UpdateRules:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.2.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download Loon Rules
        run: |
          mkdir -p Loon/Rule Temp
          declare -A rules=(
            ["Telegram"]="https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Telegram/Telegram.list"
            ["YouTube"]="https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/YouTube/YouTube.list"
            ["Twitter"]="https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Twitter/Twitter.list"
            ["Spotify"]="https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Spotify/Spotify.list"
            ["AI"]="https://raw.githubusercontent.com/sooyaaabo/Loon/refs/heads/main/Rule/AI.list"
            ["TikTok"]="https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/TikTok/TikTok.list"
            ["Instagram"]="https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Instagram/Instagram.list"
            ["GitHub"]="https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/GitHub/GitHub.list"
            ["Emby"]="https://raw.githubusercontent.com/Repcz/Tool/refs/heads/X/Loon/Rules/Emby.list"
            ["Google"]="https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Google/Google.list"
          )
          for name in "${!rules[@]}"; do
            url=${rules[$name]}
            echo "Downloading $name from $url"
            if curl -L -H "User-Agent: Surge iOS/3450" "$url" -o "Temp/$name.list" --fail; then
              echo "$url" > "Temp/$name.url"
              echo "Successfully downloaded $name"
            else
              echo "Failed to download $name from $url" >> error.log
            fi
          done
          ls -la Temp/ > temp_download_contents.log

      - name: Process Loon Rules
        run: |
          for file in Temp/*.list; do
            if [[ -f "$file" ]]; then
              sed -i '/^#/d' "$file"
              sed -i -e '/^PROCESS-NAME/d' "$file"
              file_name=$(basename "$file" .list)
              line_count=$(grep -v '^$' "$file" | wc -l)
              {
                echo "# 规则名称: $file_name"
                echo "# 规则统计: $line_count"
                echo ""
                cat "$file"
              } > tmpfile
              mv tmpfile "$file"
              mv "$file" "Loon/Rule/$file_name.list"
            else
              echo "$file not found." >> error.log
            fi
          done
          ls -la Temp/ > temp_process_contents.log

      - name: Convert to Egern Format
        run: |
          mkdir -p Egern/Rule
          for file in Loon/Rule/*.list; do
            if [[ -f "$file" ]]; then
              file_name=$(basename "$file" .list)
              yaml_file="Egern/Rule/$file_name.yaml"
              cp "$file" "$yaml_file"
              sed -i '/^#/d' "$yaml_file"
              sed -i -e '/^USER-AGENT/d' -e '/^PROCESS-NAME/d' -e '/^OR/d' -e '/^NOT/d' "$yaml_file"
              # 处理 AND 规则，提取子规则
              sed -E 's/AND, \(\((DOMAIN-KEYWORD,[^)]+)\), \((DOMAIN-SUFFIX,[^)]+)\)\)/\1\n\2/' "$yaml_file" > tmpfile
              mv tmpfile "$yaml_file"
              # 定义类别映射
              declare -A categories=(
                ["DOMAIN"]="domain_set"
                ["DOMAIN-SUFFIX"]="domain_suffix_set"
                ["DOMAIN-KEYWORD"]="domain_keyword_set"
                ["DOMAIN-WILDCARD"]="domain_wildcard_set"
                ["IP-CIDR"]="ip_cidr_set"
                ["IP-CIDR6"]="ip_cidr6_set"
                ["IP-ASN"]="asn_set"
                ["URL-REGEX"]="url_regex_set"
                ["DEST-PORT"]="dest_port_set"
                ["GEOIP"]="geoip_set"
              )
              touch tmpfile
              echo "" > tmpfile
              has_no_resolve=false
              declare -A inserted
              # 处理每一行规则
              while IFS= read -r line; do
                if [[ -z "$line" ]]; then
                  continue
                fi
                for category in "${!categories[@]}"; do
                  if [[ "$line" =~ ^${category}, ]]; then
                    if [[ -z "${inserted[${categories[$category]}]}" ]]; then
                      echo "${categories[$category]}:" >> tmpfile
                      inserted[${categories[$category]}]=1
                    fi
                    if [[ "$line" =~ ,no-resolve$ ]]; then
                      has_no_resolve=true
                      line=${line%,no-resolve}
                    fi
                    rule=${line#${category},}
                    if [[ "$category" == "URL-REGEX" ]]; then
                      echo "  - \"$rule\"" >> tmpfile
                    elif [[ "$category" == "IP-CIDR" || "$category" == "IP-CIDR6" || "$category" == "IP-ASN" ]]; then
                      if [[ "$rule" =~ ^[0-9a-fA-F.:/]+ ]]; then
                        echo "  - $rule" >> tmpfile
                      fi
                    else
                      if [[ ! "$rule" =~ ^[0-9a-fA-F.:/]+ ]]; then
                        echo "  - $rule" >> tmpfile
                      fi
                    fi
                    break
                  fi
                done
              done < "$yaml_file"
              # 生成最终 YAML 文件
              {
                echo "# 规则名称: $file_name"
                echo "# 规则统计: $(grep -c '^  - ' tmpfile)"
                echo ""
                if [[ "$has_no_resolve" == true ]]; then
                  echo "no_resolve: true"
                  echo ""
                fi
                cat tmpfile
              } > "$yaml_file"
              rm tmpfile
              # 调试：输出处理后的 YAML 文件内容
              echo "Processed $yaml_file:" >> egern_process.log
              cat "$yaml_file" >> egern_process.log
            else
              echo "$file not found." >> error.log
            fi
          done
          ls -la Temp/ > temp_egern_contents.log
          rm -rf Temp

      - name: Commit Changes
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add Loon/Rule/*.list Egern/Rule/*.yaml
          if git status -s | grep -q .; then
            git commit -m "Update Loon and Egern Rules $(date +'%Y-%m-%d %H:%M:%S')"
            git push
          else
            echo "No changes to commit." >> commit.log
          fi

      - name: Clean Workflow Runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          retain_days: 0
          keep_minimum_runs: 12