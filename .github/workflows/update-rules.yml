name: Update Loon and Egern Rules

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *"

permissions:
  actions: write
  contents: write

concurrency:
  group: update-rules
  cancel-in-progress: true

jobs:
  UpdateRules:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.2.2

      - name: Download Loon Rules
        run: |
          mkdir -p Loon/Rule Temp
          declare -A rules=(
            ["Telegram"]="https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Telegram/Telegram.list"
            ["YouTube"]="https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/YouTube/YouTube.list"
            ["Twitter"]="https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Twitter/Twitter.list"
            ["Spotify"]="https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Spotify/Spotify.list"
            ["AI"]="https://kelee.one/Tool/Loon/Rule/AI.list"
            ["TikTok"]="https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/TikTok/TikTok.list"
            ["Instagram"]="https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Instagram/Instagram.list"
            ["GitHub"]="https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/GitHub/GitHub.list"
            ["Google"]="https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Loon/Google/Google.list"
          )
          for name in "${!rules[@]}"; do
            url="${rules[$name]}"
            output="Temp/$name.list"
            echo "Downloading $name from $url"
            if curl -sL --fail -H "User-Agent: Surge iOS/3450" "$url" -o "$output"; then
              echo "$url" > "Temp/$name.url"
            else
              echo "Failed to download $name from $url"
              rm -f "$output"
              rm -f "Temp/$name.url"
            fi
          done

      - name: Process Loon Rules
        run: |
          for file in Temp/*.list; do
            [ -f "$file" ] || continue
            name=$(basename "$file" .list)
            url_file="Temp/$name.url"
            [ -s "$url_file" ] || { echo "Skipping $name: missing URL file"; continue; }
            url=$(cat "$url_file")
            sed -i -E '/^# (AUTHOR|REPO|UPDATED|DOMAIN(-[A-Z]+)?|IP-[A-Z0-9]+|USER-AGENT|TOTAL):/d' "$file"
            sed -i '/^PROCESS-NAME/d' "$file"
            line_count=$(grep -vc '^#' "$file")
            [ "$line_count" -eq 0 ] && { echo "Skipping $name: no valid rules"; continue; }
            {
              echo "# 引用链接: $url"
              echo "# 规则名称: $name"
              echo "# 规则统计: $line_count"
              echo ""
              cat "$file"
            } > "Loon/Rule/$name.list"
          done

      - name: Convert to Egern Format
        run: |
          mkdir -p Egern/Rule
          for file in Loon/Rule/*.list; do
            [ -f "$file" ] || continue
            name=$(basename "$file" .list)
            url_file="Temp/$name.url"
            [ -s "$url_file" ] || { echo "Skipping $name: missing URL file"; continue; }
            url=$(cat "$url_file")
            yaml="Temp/$name.yaml"
            cp "$file" "$yaml"
            sed -i -E '/^# (AUTHOR|REPO|UPDATED|DOMAIN(-[A-Z]+)?|IP-[A-Z0-9]+|USER-AGENT|TOTAL):/d' "$yaml"
            sed -i -e '/^PROCESS-NAME/d' -e '/^USER-AGENT/d' -e '/^AND/d' -e '/^OR/d' -e '/^NOT/d' "$yaml"

            awk '
              BEGIN { added["domain_set"] = 0; added["domain_suffix_set"] = 0; added["domain_keyword_set"] = 0;
                      added["domain_wildcard_set"] = 0; added["ip_cidr_set"] = 0; added["ip_cidr6_set"] = 0;
                      added["asn_set"] = 0; added["url_regex_set"] = 0; added["dest_port_set"] = 0;
                      added["geoip_set"] = 0 }
              {
                if ($0 ~ /^DOMAIN,/ && !added["domain_set"]++) print "domain_set:"
                else if ($0 ~ /^DOMAIN-SUFFIX,/ && !added["domain_suffix_set"]++) print "domain_suffix_set:"
                else if ($0 ~ /^DOMAIN-KEYWORD,/ && !added["domain_keyword_set"]++) print "domain_keyword_set:"
                else if ($0 ~ /^DOMAIN-WILDCARD,/ && !added["domain_wildcard_set"]++) print "domain_wildcard_set:"
                else if ($0 ~ /^IP-CIDR,/ && !added["ip_cidr_set"]++) print "ip_cidr_set:"
                else if ($0 ~ /^IP-CIDR6,/ && !added["ip_cidr6_set"]++) print "ip_cidr6_set:"
                else if ($0 ~ /^IP-ASN,/ && !added["asn_set"]++) print "asn_set:"
                else if ($0 ~ /^URL-REGEX,/ && !added["url_regex_set"]++) print "url_regex_set:"
                else if ($0 ~ /^DEST-PORT,/ && !added["dest_port_set"]++) print "dest_port_set:"
                else if ($0 ~ /^GEOIP,/ && !added["geoip_set"]++) print "geoip_set:"
                print
              }
            ' "$yaml" > tmp && mv tmp "$yaml"

            sed -i -E 's/^(URL-REGEX,)([^,]+)$/\1"\2"/' "$yaml"
            sed -i -E 's/^(DOMAIN|DOMAIN-SUFFIX|DOMAIN-KEYWORD|DOMAIN-WILDCARD|DEST-PORT|IP-CIDR|IP-CIDR6|IP-ASN|URL-REGEX|GEOIP),/  - /g' "$yaml"
            sed -i 's/,no-resolve//g' "$yaml"

            line_count=$(grep -c '^  - ' "$yaml")
            {
              echo "# 引用链接: $url"
              echo "# 规则名称: $name"
              echo "# 规则统计: $line_count"
              echo ""
              cat "$yaml"
            } > "Egern/Rule/$name.yaml"
          done
          rm -rf Temp

      - name: Commit Changes
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add Loon/Rule/*.list Egern/Rule/*.yaml || true
          if git status -s | grep -q .; then
            git commit -m "Update Loon and Egern Rules $(date +'%Y-%m-%d %H:%M:%S')"
            for i in {1..3}; do
              git pull --rebase origin main
              if git push origin main; then break; fi
              echo "Retry push ($i)..."
              sleep 5
            done
          else
            echo "No changes to commit."
          fi

      - name: Clean Workflow Runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          retain_days: 0
          keep_minimum_runs: 12