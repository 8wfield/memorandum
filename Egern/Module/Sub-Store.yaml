name: Sub-Store
description: '支持 Egern 的参数设置功能。测落地功能 ability: http-client-policy，同步配置的定时 cronexp: 55 23 * * *'
compat_arguments:
  ability: http-client-policy
  cronexp: 55 23 * * *
  sync: '"Sub-Store Sync"'
  timeout: '120'
  engine: auto
  produce: '"# Sub-Store Produce"'
  produce_cronexp: 50 */6 * * *
  produce_sub: '"sub1,sub2"'
  produce_col: '"col1,col2"'
compat_arguments_desc: |
  1️⃣ ability

  默认已开启测落地能力
  需要配合脚本操作
  如 https://raw.githubusercontent.com/Keywos/rule/main/cname.js
  填写任意其他值关闭

  2️⃣ cronexp

  同步配置定时任务
  默认为每天 23 点 55 分
  定时任务指定时将订阅/文件上传到私有 Gist，在前端，叫做 "同步" 或 "同步配置"

  3️⃣ sync

  自定义定时任务名
  便于在脚本编辑器中选择
  若设为 # 可取消定时任务

  4️⃣ timeout

  脚本超时，单位为秒

  5️⃣ engine

  默认为自动使用 webview 引擎，可设为指定 jsc，但 jsc 容易爆内存

  6️⃣ produce

  自定义处理订阅的定时任务名
  一般用于定时处理耗时较长的订阅，以更新缓存
  这样 Egern 中拉取时就能用到缓存，不至于总是超时
  若设为 # 可取消此定时任务
  默认不开启

  7️⃣ produce_cronexp

  配置处理订阅的定时任务
  默认为每 6 小时

  9️⃣ produce_sub

  自定义需定时处理的单条订阅名
  多个用 , 连接

  🔟 produce_col

  自定义需定时处理的组合订阅名
  多个用 , 连接

  ⚠️ 注意: 是 名称(name) 不是 显示名称(displayName)
  如果名称需要编码，请编码后再用 , 连接
  顺序: 并发执行单条订阅，然后并发执行组合订阅
scriptings:
- http_request:
    name: Sub-Store Core
    match: ^https?:\/\/sub\.store\/((download)|api\/(preview|sync|(utils\/node-info)))
    script_url: https://raw.githubusercontent.com/sub-store-org/Sub-Store/release/sub-store-1.min.js
    body_required: true
- http_request:
    name: Sub-Store Simple
    match: ^https?:\/\/sub\.store
    script_url: https://raw.githubusercontent.com/sub-store-org/Sub-Store/release/sub-store-0.min.js
    body_required: true
- schedule:
    name: '{{{sync}}}'
    cron: '{{{cronexp}}}'
    script_url: https://raw.githubusercontent.com/sub-store-org/Sub-Store/release/cron-sync-artifacts.min.js
- schedule:
    name: '{{{produce}}}'
    cron: '{{{produce_cronexp}}}'
    script_url: https://raw.githubusercontent.com/sub-store-org/Sub-Store/release/cron-sync-artifacts.min.js
    arguments:
      $argument: '"sub={{{produce_sub}}}&col={{{produce_col}}}"'
mitm:
  hostnames:
    includes:
    - sub.store